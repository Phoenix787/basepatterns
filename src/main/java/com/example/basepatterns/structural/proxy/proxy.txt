шаблон: proxy - заместитель
------------------------------------------------------------------------------------------------------------------------
Заместитель — это объект, который выступает прослойкой между клиентом и реальным сервисным объектом.
Заместитель получает вызовы от клиента, выполняет свою функцию (контроль доступа, кеширование, изменение запроса и прочее),
а затем передаёт вызов сервисному объекту.

Заместитель имеет тот же интерфейс, что и реальный объект, поэтому для клиента нет разницы —
работать через заместителя или напрямую.

Примеры Заместителя в стандартных библиотеках Java:

java.lang.reflect.Proxy
java.rmi.*
javax.ejb.EJB (см. комментарии)
javax.inject.Inject (см. комментарии)
javax.persistence.PersistenceContext

Признаки применения паттерна: Класс заместителя чаще всего делегирует всю настоящую работу своему реальному объекту.
Заместители часто сами следят за жизненным циклом своего реального объекта.

------------------------------------------------------------------------------------------------------------------------
Пример использования:
- когда есть необходимость ссылаться на объектт способом отличным от обычного указателя;
    * удаленное замещение - локальный представитель вместо объекта в другом адресном пространстве
    * виртуальное замещение - создание "тяжелых объектов" при необходимости.
    * защищённое замещение - контроль доступа к указанному объекту
    * "умная" ссылка - замена обычного указателя (подсчет числа ссылок, установка блокировки и т. д.)

-------------------------------------------------------------------------------------------------------------------------
Шаги реализации
Определите интерфейс, который бы сделал заместитель и оригинальный объект взаимозаменяемыми.

Создайте класс заместителя. Он должен содержать ссылку на сервисный объект. Чаще всего, сервисный объект создаётся самим заместителем.
В редких случаях, заместитель получает готовый сервисный объект от клиента через конструктор.

Реализуйте методы заместителя в зависимости от его предназначения. В большинстве случаев, проделав какую-то полезную работу,
методы заместителя должны передать запрос сервисному объекту.

Подумайте о введении фабрики, которая решала бы какой из объектов создавать — заместитель или реальный сервисный объект.
Но с другой стороны, эта логика может быть помещена в создающий метод самого заместителя.

Подумайте, не реализовать ли вам ленивую инициализацию сервисного объекта при первом обращении клиента к методам заместителя.