Шаблон: Приспособленец, Легковес (Flyweight)
-----------------------------------------------
Цель:
Поддержка множества мелких объектов

-----------------------------------------------
Для чего используется:
Использует разделение, для того чтобы поддерживать множество мелких объектов

-----------------------------------------------
Пример использования:

- когда используется большое количество мелких объектов
- большую часть состояния объектов можно вынести наружу
- приложение не зависит от идентичности объектов

------------------------------------------------------------------------------------------------------------------------
Шаги реализации
Разделите поля класса, который станет легковесом, на две части:

внутреннее состояние: значения этих полей одинаковы для большого числа объектов.
внешнее состояние (контекст): значения полей уникальны для каждого объекта.
Оставьте поля внутреннего состояние в классе, но убедитесь, что их значения неизменяемы. Эти поля должны инициализироваться только через конструктор.

Превратите поля внешнего состояния в аргументы методов, где эти поля использовались. Затем, удалите поля из класса.

Создайте фабрику, которая будет кешировать и повторно отдавать уже созданные объекты. Клиент должен запрашивать легковеса с определённым внутренним состоянием из этой фабрики, а не создавать его напрямую.

Клиент должен хранить или вычислять значения внешнего состояния (контекст) и передавать его в методы объекта легковеса.

------------------------------------------------------------------------------------------------------------------------

Весь смысл использования Легковеса — в экономии памяти. Поэтому, если в приложении нет такой проблемы, то вы вряд ли найдёте там примеры Легковеса.

Примеры Легковеса в стандартных библиотеках Java:

java.lang.Integer#valueOf(int) (а также Boolean, Byte, Character, Short, Long и  BigDecimal)
Признаки применения паттерна: Легковес можно определить по создающим методам класса, которые возвращают закешированные объекты, вместо создания новых.