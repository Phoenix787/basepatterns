Шаблон: Адаптер
==============================================================================================
Цель:

Преобразование интерфейса одного класса в интерфейс того класса, который необходим клиенту.

==============================================================================================
Для чего используется:

Для обеспечения совместной работы классов, интрефейсы которых не совместимы

===============================================================================================
Пример использования:
- интерфейс класса, который мы хотим использовать не соответствует нашим потребностям;
- необходим класс, который должен взаимодействовать с классами, которые ему неизвестны
  или не связаны с ним;
- необходимо использовать несколько существующих подклассов, но нецелесообразно использовать
  методы этих классов создавая их новые подклассы.

===============================================================================================

Адаптер выступает прослойкой между двумя объектами,
превращая вызовы одного в вызовы понятные другому.

Паттерн можно часто встретить в Java-коде, особенно там, где требуется конвертация разных типов данных
или совместная работа классов с разными интерфейсами.

Примеры Адаптеров в стандартных библиотеках Java:

java.util.Arrays#asList()
java.util.Collections#list()
java.util.Collections#enumeration()
java.io.InputStreamReader(InputStream) (возвращает объект Reader)
java.io.OutputStreamWriter(OutputStream) (возвращает объект Writer)
javax.xml.bind.annotation.adapters.XmlAdapter#marshal() и #unmarshal()


Признаки применения паттерна:
Адаптер получает конвертируемый объект в конструкторе или через параметры своих методов.
Методы Адаптера обычно совместимы с интерфейсом одного объекта. Они делегируют вызовы вложенному объекту,
превратив перед этим параметры вызова в формат, поддерживаемый вложенным объектом.