package com.example.basepatterns.creational.builder.builders;

import com.example.basepatterns.creational.builder.Website;

/*
выделить вызовы методов строителя в отдельный класс, называемый «Директором».
В этом случае директор будет задавать порядок шагов строительства, а строитель — выполнять их.
Отдельный класс директора не является строго обязательным. Вы можете вызывать методы строителя
и напрямую из клиентского кода.
Тем не менее, директор полезен, если у вас есть несколько способов конструирования продуктов,
отличающихся порядком и наличием шагов конструирования. В этом случае, вы сможете объединить
всю эту логику в одном классе.

Такая структура классов полностью скроет от клиентского кода процесс конструирования объектов.
Клиенту останется только привязать желаемого строителя к директору, а затем получить у строителя готовый результат.


этот класс нужен для того, чтобы сократить количество кода в конечном классе.
Именно этот класс будет определять какой же именно билдер нужно использовать для создания вебсайта
здесь мы можем использовать любую реализацию абстрактного класса WebBuilder
 */
public class Director {
    WebsiteBuilder builder;

    public void setBuilder(WebsiteBuilder builder) {
        this.builder = builder;
    }

    public Website buildWebsite(){
        builder.createWebsite();
        builder.buildName();
        builder.buildCms();
        builder.buildPrice();

        return builder.getWebsite();
    }
}
