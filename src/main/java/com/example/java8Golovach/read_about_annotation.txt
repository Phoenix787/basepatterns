Аннотации представляют собой некую мета-информацию.
 * Они не выполняют какого-либо действия сами по себе,
 * но они могут предоставлять дополнительную информацию,
 * которая может быть использована компилятором, различными утилитами сборки и генерации кода,
 * а также они могут обрабатываться во время выполнения программы
 * мета-аннотации - для применения к другим аннотациям:
 * @Retention определяет, как аннотация будет сохранена:
        RetentionPolicy.SOURCE — аннотация будет только в исходном коде,
        и она будет игнорироваться компилятором.
        RetentionPolicy.CLASS — аннотация будет доступна компилятору,
        но но будет игнорироваться виртуальной машиной Java.
        RetentionPolicy.RUNTIME — аннотация будет сохраняться JVM
        и будет доступна во время выполнения.

 @Documented — указывает, что элементы, помеченные этой аннотацией, должны документироваться JavaDoc. По умолчанию аннотации не включаются в документацию.

 @Target — указывает какие элементы можно помечать этой аннотацией:

 ElementType.ANNOTATION_TYPE — данная аннотация может быть применена к другой аннотации.
 ElementType.CONSTRUCTOR — может быть применена к конструктору.
 ElementType.FIELD — может быть применена к полю.
 ElementType.LOCAL_VARIABLE — может быть применена к локальной переменной.
 ElementType.METHOD — может быть применена к методу.
 ElementType.PACKAGE — может быть применена к пакету.
 ElementType.PARAMETER — может быть применена к параметрам метода.
 ElementType.TYPE — может быть применена к любому элементу класса.
 @Inherited — аннотация может быть унаследована от базового класса (по умолчанию не наследуются). Когда запрашивается аннотация класса, и у класса нет такой аннотации, то запрашивается аннотация базового класса. Эта аннотация может быть применена только к классам.

 @Repeatable — аннотация может быть применена несколько раз.