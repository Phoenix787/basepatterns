Параллелизм по данным
---------------------------------------------------
Конкурентность означает, что выполнение двух задач перекрывается во времени.

В случае параллелизма выполнение двух задач реально происходит в одно и то же время,
как, например, на многоядерном процессоре.

Если программа запускает две задачи, которые попеременно получают небольшие кванты времени
на одноядерном процессоре, то имеет место конкурентность, но не параллелизм.

Цель параллелизма – уменьшить время работы конкретной задачи,
разбив ее на меньшие части, которые работают параллельно. Это не
означает, что общий объем работы уменьшается, по сравнению с по-
следовательным выполнением той же задачи, – просто один и тот же
воз тянут больше лошадей и справляются с этим быстрее. На самом
деле обычно для распараллеливания задачи процессору приходится
делать даже больше работы, чем при последовательном выполнении.

Параллелизм по данным.
Распараллеливание при этом достигается за счет того, что рабочий набор данных разбивается на порции,
и каждой порции назначается отдельный обрабатывающий блок.

Параллелизм по данным оказывается прекрасным решением, когда одну и ту же операцию требуется выполнить над различными
данными. Задачу необходимо подвергнуть декомпозиции, так чтобы порции данных можно было обрабатывать одновременно, а в конце
объединить частичные результаты, полученные для каждой порции.
Параллелизму по данным часто противопоставляют параллелизм на уровне задач, когда каждый поток выполнения решает свою задачу.
Пожалуй, самым известным примером параллелизма на уровне задач является контейнер приложений в Java EE. Различные потоки могут
не только работать над задачами разных пользователей, но и выполнять совершенно разные задачи, например один поток занимается
аутентификацией пользователя, а другой добавляет товар в корзину.

Параллельные потоковые операции
-----------------------------
Чтобы распараллелить операцию, реализованную с помощью потоковой библиотеки, достаточно изменить вызов одного метода. Если
уже имеется объект Stream, то для превращения его в параллельный нужно вызвать его метод parallel.

Если объект Stream создается из Collection, то для получения параллельного потока нужно создавать его
с помощью метода parallelStream.

потоковая библиотека дает нам лишь параллелизм по данным!!!
------------------------------------------------------------

Мы должны спросить себя, что быстрее: выполнить потоковый
код последовательно или параллельно, а это отнюдь не простой во-
прос. Предыдущая программа вычисления полной длительности
звучания произведений из всех альбомов может работать быстрее
в параллельном или последовательном варианте в зависимости от
обстоятельств.

При замере времени работы примеров 6.1 и 6.2 на 4-ядерной ма-
шине при 10 альбомах последовательная версия оказывается в 8 раз
быстрее. При 100 альбомах обе версии работают одинаково быстро,
а при 10 000 альбомов параллельная версия опережает последова-
тельную в 2,5 раза.
